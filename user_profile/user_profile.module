<?php/** * @file * Custom User Profile / User Preference Center module * * @author  Ed McLaughlin <epmclaughlin@gmail.com> *  * This module extends the standard Drupal User Profile Form, providing additional * user demographic and preference fields. * */module_load_include('inc', 'user', 'user.pages');module_load_include('php', 'user_profile', 'includes/user_preference_menu');module_load_include('php', 'user_profile', 'includes/user_preference_admin');module_load_include('php', 'user_profile', 'includes/user_preference_functions');module_load_include('php', 'user_profile', 'includes/user_preference_form');module_load_include('php', 'user_profile', 'includes/user_preference_submit');module_load_include('php', 'user_profile', 'includes/user_preference_cron');module_load_include('php', 'user_profile', 'includes/user_preference_term_bitfield_map');define("DIGIBRIJ_LISTID",     "00000");define("PARENT_CO_LISTID",         "00000");define("MAIL_APP_EVENT_ID_NEWSLETTER_SUBSCRIBE", "00000");define("MAIL_APP_EVENT_ID_PROFILE_WELCOME", "00000");define("MAIL_APP_EVENT_ID_PROFILE_UPDATE", "00000");/*** Add javascript and stylesheets to page for form styling and behaviors*/drupal_add_js(drupal_get_path('module', 'user_profile') . '/js/user_preference.js');drupal_add_css(drupal_get_path('module', 'user_profile') . '/css/user_preference.css');/** *  Implements hook_form_alter() */function user_profile_form_alter(&$form, $form_state, $form_id) {  switch($form_id) {    case 'user_register':      if (arg(0) != 'admin') {        // Profile types are 'full' or 'basic'. 'Full' gets the entire set of Preference Center        // forms. 'Basic' gets basic Drupal user account/profile forms        $profile_type = _get_profile_type();        _user_preference_set_account_form($form, FALSE, $profile_type, 'null');        $user_preference_form = _user_profile_form_fields(FALSE, $profile_type, 'null');        $form = array_merge($form, $user_preference_form);        unset($form['submit']);        $form['#submit'][] = 'user_profile_user_register_submit';        $form['#validate'][] = 'user_profile_user_register_validate';        if ($form_state['post']['op']) {          $form['my_profile']['#attributes']['class'] = 'user-profile-type-full user-profile-fieldset-display-on';          $form['my_beauty_profile']['#attributes']['class'] = 'user-profile-type-full user-profile-fieldset-display-on';          $form['my_settings']['#attributes']['class'] = 'user-profile-type-full user-profile-fieldset-display-on';          $form['save_and_submit']['#attributes']['class'] = 'user-profile-type-full user-profile-fieldset-display-on';          $form['account']['back']['#type'] = 'hidden';          $form['my_profile']['back']['#type'] = 'hidden';          $form['my_settings']['back']['#type'] = 'hidden';          $form['my_beauty_profile']['back']['#type'] = 'hidden';          $form['save_and_submit']['back']['#type'] = 'hidden';          $form['account']['next']['#type'] = 'hidden';          $form['my_profile']['next']['#type'] = 'hidden';          $form['my_settings']['next']['#type'] = 'hidden';          $form['my_beauty_profile']['next']['#type'] = 'hidden';        }      }    break;    case 'user_profile_form':      global $user;      $account = user_load($user->uid);      $arg2 = arg(2);      if ($user->uid > 0) {        if (isset($arg2) && is_string($arg2)) {          $preference_page = $arg2;        } else {          $preference_page = 'profile';        }        // Profile types are 'full' or 'basic'. 'Full' gets the entire set of Preference Center        // forms. 'Basic' gets basic Drupal user account/profile forms        $profile_type = _get_profile_type();        // Modify the standard user profile for a little to work with the        // Preference Center's custom user profile form. $form is passed by reference.        _user_preference_set_account_form($form, $account, $profile_type, $preference_page);        // Retrieve an instance of the Preference Center's custom user profile form        $user_preference_form = _user_profile_form_fields($account, $profile_type, $preference_page);        // Merge those two forms together, ever so gently.        $form = array_merge($form, $user_preference_form);        // Remove default submit button. We have one in the bottom of the Preference form.        // Add custom validation and submit function - these are executed in addition to        // the standard user registration/edit validation and submit functions.        unset($form['submit']);        $form['#submit'][] = 'user_profile_user_edit_submit';        $form['#validate'][] = 'user_profile_user_edit_validate';      }    break;  }}/** * Implementation of hook_theme */function user_profile_theme(&$existing,$type,$theme,$path) {   return array(      'user_register' => array(         'arguments' => array('form' => NULL),         'template' => 'user-profile-register'      ),      'user_profile_form' => array(         'arguments' => array('form' => NULL),         'template' => 'user-profile-edit'      ),      'user_profile_update_reminder_page' => array(        'template' => 'user-profile-update-reminder'      ),      'multicolumn_options' => array(         'arguments' => array('element' => NULL),      ),   );}/** *  Validation function for initial user registration. */function user_profile_user_register_validate(&$form, &$form_state) {  if($form_state['values']['birth_date']['month'] == '0') {    form_set_error('birth_date][month', t('Birth Date - Month is required.'));  }  if($form_state['values']['birth_date']['day'] == '0') {    form_set_error('birth_date][day', t('Birth Date - Day is required.'));  }  if($form_state['values']['birth_date']['year'] == '0') {    form_set_error('birth_date][year', t('Birth Date - Year is required.'));  }  if ($form_state['values']['privacy'] != 1) {    form_set_error('privacy',t('Accepting Privacy Policy is required.'));  }  // Reorder the error messages to match field order  $form_errors = form_get_errors();  $clear_errors = form_set_error(NULL,NULL,TRUE);  $clear_messages = drupal_get_messages('error');  $field_order = array('name','pass','first_name','last_name','mail','birth_date][month', 'birth_date][day', 'birth_date][year', 'privacy','captcha_response');  foreach ($field_order as $field) {    if (isset($form_errors[$field])) {      form_set_error($field,$form_errors[$field]);    }  }}/** *  Validation function for extended user profile. */function user_profile_user_edit_validate(&$form, &$form_state) {   if( ($form_state['values']['birth_date']['month'] == '0') ) {      form_set_error('birth_date][month', t('Birth Date - Month is required.'));   }   if( ($form_state['values']['birth_date']['day'] == '0') ) {      form_set_error('birth_date][day', t('Birth Date - Day is required.'));   }   if( ($form_state['values']['birth_date']['year'] == '0') ) {      form_set_error('[birth_date][year', t('Birth Date - Year is required.'));   }}